import { Migration } from '@mikro-orm/migrations';

export class Migration20240703153409_initial extends Migration {
    async up(): Promise<void> {
        this.addSql('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";'); // Fix UUID error

        this.addSql('create table "giz_benchmark" ("id" uuid not null default uuid_generate_v4(), "created_at" timestamp not null default now(), "updated_at" timestamp not null default now(), "version" int not null default 1, "source" varchar(255) not null, "year" smallint not null, "country_code" varchar(2) not null, "locality" varchar(255) not null, "region" varchar(255) not null, "currency_code" varchar(3) not null, "local_value" numeric(12,2) not null, "eur_value" numeric(12,2) not null, "usd_value" numeric(12,2) not null, constraint "giz_benchmark_pkey" primary key ("id"));');
        this.addSql('create table "giz_user" ("id" uuid not null default uuid_generate_v4(), "created_at" timestamp not null default now(), "updated_at" timestamp not null default now(), "version" int not null default 1, "email" varchar(255) not null, "password" varchar(255) not null, "password_created_at" timestamp not null default \'now\', "salt" varchar(255) not null, "email_verified" boolean not null default false, "verification_code" varchar(6) null, "verification_expires_at" timestamptz null, "twofactor_enabled" boolean null default false, "twofactor_secret" varchar(255) null, "refresh_token" varchar(400) null, constraint "giz_user_pkey" primary key ("id"));');
        this.addSql('create table "giz_entry" ("id" uuid not null default uuid_generate_v4(), "created_at" timestamp not null default now(), "updated_at" timestamp not null default now(), "version" int not null default 1, "user_id_id" uuid not null, "matrix_id" varchar(255) null, "matrix_verified" boolean null, "status" text check ("status" in (\'CREATED\', \'INFO_DONE\', \'PAYROLL_DONE\', \'SCENARIO_DONE\', \'DISTRIBUTION_DONE\', \'COMPLETED\')) not null, "facility__name" varchar(255) not null, "facility__country" varchar(255) not null, "facility_id" varchar(255) null, "facility__products" varchar(255) null, "facility_production_unit" varchar(255) null, "facility_production_amount" numeric(15,2) null, "benchmark__country" varchar(255) null, "benchmark__year" smallint null, "benchmark__source" varchar(255) null, "benchmark__region" varchar(255) null, "benchmark__locality" varchar(255) null, "benchmark__value" numeric(12,2) null, "buyer__name" varchar(255) null, "buyer__unit" text check ("buyer__unit" in (\'MEN\', \'WOMEN\')) null, "buyer__amount" numeric(9,2) null, "payroll__year" smallint not null, "payroll_currency_code" varchar(3) null, "payroll_num_job_categories" integer not null default 0, "payroll_num_workers" integer not null default 0, "payroll_num_workers_lwgap" integer not null default 0, "payroll_avg_lwgap" numeric(12,4) not null default 0, "payroll_largest_lwgap" numeric(12,4) not null default 0, "payroll_sum_lwgap_allworkers" numeric(12,4) not null default 0, constraint "giz_entry_pkey" primary key ("id"));');
        this.addSql('create table "giz_scenario" ("id" uuid not null default uuid_generate_v4(), "created_at" timestamp not null default now(), "updated_at" timestamp not null default now(), "version" int not null default 1, "type" text check ("type" in (\'CLOSE_GAP\', \'ABSOLUTE_INCREASE\')) not null, "entry_id" uuid not null, "specs_tax_employee" smallint null, "specs_tax_employer" smallint null, "specs_overhead_costs" numeric(12,2) null, "specs_remuneration_increase" numeric(12,2) null, "distro_base_wage" numeric(5,2) null, "distro_bonuses" numeric(5,2) null, "distro_ikb" numeric(5,2) null, "distro_ikb_housing" numeric(5,2) null, "distro_ikb_food" numeric(5,2) null, "distro_ikb_transport" numeric(5,2) null, "distro_ikb_healthcare" numeric(5,2) null, "distro_ikb_childcare" numeric(5,2) null, "distro_ikb_child_education" numeric(5,2) null, "payroll_num_workers_lwgap" integer not null default 0, "payroll_avg_lwgap" numeric(12,4) not null default 0, "payroll_largest_lwgap" numeric(12,4) not null default 0, "payroll_sum_lwgap_allworkers" numeric(12,4) not null default 0, constraint "giz_scenario_pkey" primary key ("id"));');
        this.addSql('create table "giz_entry_worker" ("id" uuid not null default uuid_generate_v4(), "created_at" timestamp not null default now(), "updated_at" timestamp not null default now(), "version" int not null default 1, "entry_id" uuid not null, "name" varchar(255) not null, "gender" text check ("gender" in (\'MEN\', \'WOMEN\')) not null, "nr_of_workers" integer not null, "perc_of_year_worked" numeric(5,2) not null, "base_wage" numeric(12,2) not null, "bonuses" numeric(12,2) not null, "ikb" numeric(12,2) not null, "ikb_housing" numeric(12,2) not null, "ikb_food" numeric(12,2) not null, "ikb_transport" numeric(12,2) not null, "ikb_healthcare" numeric(12,2) not null, "ikb_childcare" numeric(12,2) not null, "ikb_child_education" numeric(12,2) not null, constraint "giz_entry_worker_pkey" primary key ("id"));');
        this.addSql('create table "giz_scenario_worker" ("id" uuid not null default uuid_generate_v4(), "created_at" timestamp not null default now(), "updated_at" timestamp not null default now(), "version" int not null default 1, "scenario_id" uuid not null, "original_id" uuid not null, "specs_remuneration_increase" numeric(12,2) null, "distro_base_wage" numeric(5,2) null, "distro_bonuses" numeric(5,2) null, "distro_ikb" numeric(5,2) null, "distro_ikb_housing" numeric(5,2) null, "distro_ikb_food" numeric(5,2) null, "distro_ikb_transport" numeric(5,2) null, "distro_ikb_healthcare" numeric(5,2) null, "distro_ikb_childcare" numeric(5,2) null, "distro_ikb_child_education" numeric(5,2) null, constraint "giz_scenario_worker_pkey" primary key ("id"));');
        this.addSql('alter table "giz_entry" add constraint "giz_entry_user_id_id_foreign" foreign key ("user_id_id") references "giz_user" ("id") on update cascade on delete cascade;');
        this.addSql('alter table "giz_scenario" add constraint "giz_scenario_entry_id_foreign" foreign key ("entry_id") references "giz_entry" ("id") on update cascade on delete cascade;');
        this.addSql('alter table "giz_entry_worker" add constraint "giz_entry_worker_entry_id_foreign" foreign key ("entry_id") references "giz_entry" ("id") on update cascade on delete cascade;');

        this.addSql('alter table "giz_user" add constraint "giz_user_email_unique" unique ("email");');
        this.addSql('alter table "giz_scenario" add constraint "giz_scenario_entry_id_unique" unique ("entry_id");');
        this.addSql('alter table "giz_scenario_worker" add constraint "giz_scenario_worker_scenario_id_foreign" foreign key ("scenario_id") references "giz_scenario" ("id") on update cascade on delete cascade;');
        this.addSql('alter table "giz_scenario_worker" add constraint "giz_scenario_worker_original_id_foreign" foreign key ("original_id") references "giz_entry_worker" ("id") on update cascade on delete cascade;');
    }

    async down(): Promise<void> {
        this.addSql('alter table "giz_entry" drop constraint "giz_entry_user_id_id_foreign";');
        this.addSql('alter table "giz_scenario" drop constraint "giz_scenario_entry_id_foreign";');
        this.addSql('alter table "giz_entry_worker" drop constraint "giz_entry_worker_entry_id_foreign";');
        this.addSql('alter table "giz_scenario_worker" drop constraint "giz_scenario_worker_scenario_id_foreign";');
        this.addSql('alter table "giz_scenario_worker" drop constraint "giz_scenario_worker_original_id_foreign";');

        this.addSql('drop table if exists "giz_benchmark" cascade;');
        this.addSql('drop table if exists "giz_user" cascade;');
        this.addSql('drop table if exists "giz_entry" cascade;');
        this.addSql('drop table if exists "giz_scenario" cascade;');
        this.addSql('drop table if exists "giz_entry_worker" cascade;');
        this.addSql('drop table if exists "giz_scenario_worker" cascade;');
    }
}
